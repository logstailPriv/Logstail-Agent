metricbeat.modules:
#-------------------------------- System Module --------------------------------
- module: system
  #system enabled
  enabled: true
  period: 10s
  metricsets:
    - cpu
    #- load
    - memory
    - network
    - process
    - process_summary
    - socket_summary
    #- entropy
    - core
    - diskio
    #- socket
    #- service
    #- users
  #hostfs: "/hostfs"
  process.include_top_n:
    by_cpu: 5      # include top 5 processes by CPU
    by_memory: 5   # include top 5 processes by memory
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"

- module: system
  #system enabled
  enabled: true
  period: 1m
  metricsets:
    - filesystem
    - fsstat
  processors:
  - drop_event.when.regexp:
      system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib|snap)($|/)'
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"
- module: system
  #system enabled
  enabled: true
  period: 15m
  metricsets:
    - uptime
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ Aerospike Module ------------------------------

- module: aerospike
  #aerospike enabled
  enabled: false
  metricsets: ["namespace"]
  period: 10s
  hosts: ["localhost:3000"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Apache Module --------------------------------
- module: apache
  #apache enabled
  enabled: false
  metricsets: ["status"]
  period: 10s

  # Apache hosts
  hosts: ["http://127.0.0.1"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#--------------------------------- Ceph Module ---------------------------------
# Metricsets depending on the Ceph REST API (default port: 5000)
- module: ceph
  #ceph enabled
  enabled: false
  metricsets: ["cluster_disk", "cluster_health", "monitor_health", "pool_disk", "osd_tree"]
  period: 10s
  hosts: ["localhost:5000"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Consul Module --------------------------------
- module: consul
  #consul enabled
  enabled: false
  metricsets:
  - agent
  period: 10s
  hosts: ["localhost:8500"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#------------------------------ Couchbase Module ------------------------------
- module: couchbase
  #couchbase enabled
  enabled: false
  metricsets: ["bucket", "cluster", "node"]
  period: 10s
  hosts: ["localhost:8091"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- CouchDB Module -------------------------------
- module: couchdb
  #couchdb enabled
  enabled: false
  metricsets: ["server"]
  period: 10s
  hosts: ["localhost:5984"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"

#-------------------------------- Docker Module --------------------------------
- module: docker
  #docker enabled
  enabled: false
  metricsets:
    - "container"
    - "cpu"
    - "diskio"
    - "event"
    - "healthcheck"
    - "info"
    #- "image"
    - "memory"
    - "network"
    #- "network_summary"
  hosts: ["unix:///var/run/docker.sock"]
  period: 10s

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"

#------------------------------ Dropwizard Module ------------------------------
- module: dropwizard
  #dropwizard enabled
  enabled: false
  metricsets: ["collector"]
  period: 10s
  hosts: ["localhost:8080"]
  metrics_path: /metrics/metrics
  namespace: example
  
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ Envoyproxy Module ------------------------------
- module: envoyproxy
  #envoyproxy enabled
  enabled: false
  metricsets: ["server"]
  period: 10s
  hosts: ["localhost:9901"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#--------------------------------- Etcd Module ---------------------------------
- module: etcd
  #etcd enabled
  enabled: false
  metricsets: ["leader", "self", "store"]
  period: 10s
  hosts: ["localhost:2379"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Golang Module --------------------------------
- module: golang
  #golang enabled
  enabled: false
  metricsets:
    - expvar
    - heap
  period: 10s
  hosts: ["localhost:6060"]
  heap.path: "/debug/vars"
  expvar:
    namespace: "example"
    path: "/debug/vars"

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- Graphite Module -------------------------------
- module: graphite
  #graphite enabled
  enabled: false
  metricsets: ["server"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#------------------------------- HAProxy Module -------------------------------
- module: haproxy
  #haproxy enabled
  enabled: false
  metricsets: ["info", "stat"]
  period: 10s
  # TCP socket, UNIX socket, or HTTP address where HAProxy stats are reported
  # TCP socket
  hosts: ["tcp://127.0.0.1:14567"]
  # UNIX socket
  #hosts: ["unix:///path/to/haproxy.sock"]
  # Stats page
  #hosts: ["http://127.0.0.1:14567"]
  username : "admin"
  password : "admin"

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#--------------------------------- HTTP Module ---------------------------------
- module: http
  #http enabled
  enabled: false
  #metricsets:
  #  - json
  period: 10s
  hosts: ["localhost:80"]
  namespace: "json_namespace"
  path: "/"

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- Jolokia Module -------------------------------
- module: jolokia
  #jolokia enabled
  enabled: false
  #metricsets: ["jmx"]
  period: 10s
  hosts: ["localhost"]
  namespace: "metrics"
  #path: "/jolokia/?ignoreErrors=true&canonicalNaming=false"
  #username: "user"
  #password: "secret"
  jmx.mappings:
    #- mbean: 'java.lang:type=Runtime'
    #  attributes:
    #    - attr: Uptime
    #      field: uptime
    #- mbean: 'java.lang:type=Memory'
    #  attributes:
    #    - attr: HeapMemoryUsage
    #      field: memory.heap_usage
    #    - attr: NonHeapMemoryUsage
    #      field: memory.non_heap_usage
    # GC Metrics - this depends on what is available on your JVM
    #- mbean: 'java.lang:type=GarbageCollector,name=ConcurrentMarkSweep'
    #  attributes:
    #    - attr: CollectionTime
    #      field: gc.cms_collection_time
    #    - attr: CollectionCount
    #      field: gc.cms_collection_count

  jmx.application:
  jmx.instance:
  
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Kafka Module --------------------------------
# Kafka metrics collected using the Kafka protocol
- module: kafka
  #kafka enabled
  enabled: false
  metricsets:
    - partition
    - consumergroup
  period: 10s
  hosts: ["localhost:9092"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 #------------------------------ Kubernetes Module ------------------------------
 # Node metrics, from kubelet:
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - container
    - node
    - pod
    - system
    - volume
  period: 10s
  hosts: ["https://${NODE_NAME}:10250"]
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  ssl.verification_mode: "none"
  #ssl.certificate_authorities:
  #  - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
  #ssl.certificate: "/etc/pki/client/cert.pem"
  #ssl.key: "/etc/pki/client/cert.key"

  # Enriching parameters:
  add_metadata: true
 
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 # State metrics from kube-state-metrics service:
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - state_node
    - state_daemonset
    - state_deployment
    - state_replicaset
    - state_statefulset
    - state_pod
    - state_container
    - state_job
    - state_cronjob
    - state_resourcequota
    - state_service
    - state_persistentvolume
    - state_persistentvolumeclaim
    - state_storageclass
    # Uncomment this to get k8s events:
    #- event  period: 10s
  hosts: ["kube-state-metrics:8080"]

  # Enriching parameters:
  add_metadata: true
  
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"

 
 # Kubernetes Events
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - event
  period: 10s
  
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 # Kubernetes API server
 # (when running metricbeat as a deployment)
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - apiserver
  hosts: ["https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"]
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  ssl.certificate_authorities:
    - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  period: 30s

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 # Kubernetes proxy server
 # (when running metricbeat locally at hosts or as a daemonset + host network)
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - proxy
  hosts: ["localhost:10249"]
  period: 10s


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 # Kubernetes controller manager
 # (URL and deployment method should be adapted to match the controller manager deployment / service / endpoint)
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - controllermanager
  hosts: ["http://localhost:10252"]
  period: 10s


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


 # Kubernetes scheduler
 # (URL and deployment method should be adapted to match scheduler deployment / service / endpoint)
- module: kubernetes
  #kubernetes enabled
  enabled: false
  metricsets:
    - scheduler
  hosts: ["localhost:10251"]
  period: 10s


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#--------------------------------- KVM Module ---------------------------------
- module: kvm
  #kvm enabled
  enabled: false
  metricsets: ["dommemstat", "status"]
  period: 10s
  hosts: ["unix:///var/run/libvirt/libvirt-sock"]
  # For remote hosts, setup network access in libvirtd.conf
  # and use the tcp scheme:
  # hosts: [ "tcp://<host>:16509" ]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#-------------------------------- Linux Module --------------------------------
- module: linux
  #linux enabled
  enabled: false
  period: 10s
  metricsets:
    - "pageinfo"
    - "memory"
    - ksm
    - conntrack
    - iostat
    - pressure
    - rapl
  hostfs: /hostfs
  #rapl.use_msr_safe: false

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#------------------------------- Logstash Module -------------------------------
- module: logstash
  #logstash enabled
  metricsets: ["node", "node_stats"]
  enabled: false
  period: 10s
  hosts: ["localhost:9600"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ Memcached Module ------------------------------
- module: memcached
  #memcached enabled
  enabled: false
  metricsets: ["stats"]
  period: 10s
  hosts: ["localhost:11211"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- MongoDB Module -------------------------------
- module: mongodb
  #mongodb enabled
  enabled: false
  metricsets: ["dbstats", "status", "collstats", "metrics", "replstatus"]
  period: 10s
  hosts: ["localhost:27017"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Munin Module --------------------------------
- module: munin
  #munin enabled
  enabled: false
  metricsets: ["node"]
  period: 10s
  hosts: ["localhost:4949"]
 
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#-------------------------------- MySQL Module --------------------------------
- module: mysql
# mysql enabled
  enabled: false
  metricsets:
    - status
    - galera_status
    - performance
    - query
  period: 10s
  hosts: ["root:secret@tcp(127.0.0.1:3306)/"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#--------------------------------- NATS Module ---------------------------------
- module: nats
  #nats enabled
  enabled: false 
  metricsets:
    - "connections"
    - "routes"
    - "stats"
    - "subscriptions"
    - "connection"
    - "route"
  period: 10s
  hosts: ["localhost:8222"]

  
  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Nginx Module --------------------------------
- module: nginx
  #nginx enabled
  enabled: false
  metricsets: ["stubstatus"]
  period: 10s

  # Nginx hosts
  hosts: ["http://127.0.0.1"]

  # Path to server status. Default nginx_status
  server_status_path: "nginx_status"


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"



#----------------------------- Openmetrics Module -----------------------------
- module: openmetrics
  #openmetrics enabled
  enabled: false
  metricsets: ['collector']
  period: 10s
  hosts: ['localhost:9090']

  metrics_path: /metrics
  metrics_filters:
    include: []
    exclude: []


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- PHP_FPM Module -------------------------------
- module: php_fpm
  metricsets:
  - pool
  - process
  #php_fpm enabled
  enabled: false
  period: 10s
  status_path: "/status"
  hosts: ["localhost:8080"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ PostgreSQL Module ------------------------------
- module: postgresql
  #postgresql enabled
  enabled: false
  metricsets:
    - database
    - bgwriter
    - activity

  period: 10s

  hosts: ["postgres://localhost:5432"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ Prometheus Module ------------------------------
# Metrics collected from a Prometheus endpoint
- module: prometheus
  #prometheus enabled
  enabled: false
  period: 10s
  metricsets: ["collector"]
  hosts: ["localhost:9090"]
  metrics_path: /metrics

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"

#------------------------------- RabbitMQ Module -------------------------------
- module: rabbitmq
  metricsets: ["node", "queue", "connection", "exchange", "shovel"]
  #rabbitmq enabled
  enabled: false
  period: 10s
  hosts: ["localhost:15672"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- Redis Module --------------------------------
- module: redis
  metricsets: ["info", "keyspace"]
  #redis enabled
  enabled: false
  period: 10s

  # Redis hosts
  hosts: ["127.0.0.1:6379"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- Traefik Module -------------------------------
- module: traefik
  #traefik enabled
  enabled: false
  metricsets: ["health"]
  period: 10s
  hosts: ["localhost:8080"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#-------------------------------- UWSGI Module --------------------------------
- module: uwsgi
  metricsets: ["status"]
  #uwsgi enabled
  enabled: false
  period: 10s
  hosts: ["tcp://127.0.0.1:9191"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- VSphere Module -------------------------------
- module: vsphere
  #vsphere enabled
  enabled: false
  metricsets: ["datastore", "host", "virtualmachine"]
  period: 10s
  hosts: ["https://localhost/sdk"]

  username: "user"
  password: "password"
  insecure: false

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------- Windows Module -------------------------------
- module: windows
  metricsets: ["perfmon"]
  #windows enabled
  enabled: false
  period: 10s
  perfmon.ignore_non_existent_counters: false
  perfmon.group_measurements_by_instance: false
  perfmon.queries:
  - object: 'Process'
    instance: ["*"]
    counters:
    - name: '% Processor Time'
      field: cpu_usage
      format: "float"
    - name: "Thread Count"

- module: windows
  metricsets: ["service"]
  #windows enabled
  enabled: false
  period: 60s


  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"


#------------------------------ ZooKeeper Module ------------------------------
- module: zookeeper
  #zookeeper enabled
  enabled: false
  metricsets: ["mntr", "server"]
  period: 10s
  hosts: ["localhost:2181"]

  fields_under_root: true
  fields:
    logstail_agent: "metrics"
    token: "USER_TOKEN"




# ------------------------------ Logstash Output -------------------------------
output.logstash:
  #The Logstash hosts
  hosts: ["apps.logstail.com:35723"]
  ssl.certificate_authorities: ["LOGSTAIL_CERT"]
processors:
  - add_host_metadata: ~
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~
